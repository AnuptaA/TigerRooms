{"version":3,"sources":["img/misc/upload-file-svgrepo-com.svg","img/floorplans sync /^/.//.*_.*_.*/.png$","img/floorplans/Whitman_Wendell-B_2.png","img/floorplans/Whitman_Wendell-B_3.png","img/floorplans/Whitman_Wendell-B_4.png","img/floorplans/Whitman_Wendell-C_2.png","img/floorplans/Whitman_Wendell-C_3.png","img/floorplans/Whitman_Wendell-C_4.png","pages/FloorPlans.js","pages/FilterComponent.js","pages/HallFloor.js","pages/Logout.js","pages/UploadPDFs.js","Components/Footer.js","Components/NavBar.js","pages/Cart.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./Whitman_Wendell-B_2.png","./Whitman_Wendell-B_3.png","./Whitman_Wendell-B_4.png","./Whitman_Wendell-C_2.png","./Whitman_Wendell-C_3.png","./Whitman_Wendell-C_4.png","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","AvailabilityTable","_ref","availabilityInfo","maxFloors","length","Math","max","info","floors","React","createElement","className","src","alt","generateLink","resco","hall","floor","index","key","Array","_","rowIndex","colIndex","href","FloorPlans","location","useLocation","searchParams","URLSearchParams","search","resCollege","get","occupancy","minSquareFootage","resCollegeForCookie","hallForCookie","floorForCookie","occupancyForCookie","minSquareFootageForCookie","setAvailabilityInfo","useState","useEffect","document","cookie","queryString","encodeURIComponent","endsWith","slice","fetch","then","response","ok","status","json","data","catch","error","console","FilterComponent","residentialCollege","setResidentialCollege","setHall","setFloor","setOccupancy","setMinSquareFootage","setError","squareFootageError","setSquareFootageError","navigate","useNavigate","htmlFor","value","onChange","target","style","borderColor","college","idx","disabled","Butler","Forbes","Mathey","Ncw","Rocky","Whitman","Yeh","hallOption","sz","occ","type","min","Number","isInteger","placeholder","onClick","handleSubmit","isNaN","url","queryParams","push","join","handleResetFilters","RoomInfoTable","_ref2","roomInfo","expandedRows","toggleExpandRow","handleSaveToggle","hallName","border","cellPadding","oneRoomInfo","Fragment","width","height","backgroundColor","isAvailable","borderRadius","marginRight","name","userSelect","includes","colSpan","padding","size","total_saves","split","isSaved","marginTop","cursor","display","marginBottom","alignItems","HallFloor","username","log","setRoomInfo","setExpandedRows","debouncing","setDebouncing","imageSrc","require","getCookie","cookies","cookieKey","cookieValue","returnLink","filter","i","roomNumber","method","headers","Content-Type","body","JSON","stringify","netid","room_number","prevRoomInfo","room","finally","setTimeout","Logout","message","setMessage","credentials","res","window","logout_url","err","alert","process","UploadPDFs","adminStatus","fileName","setFileName","file","setFile","canSubmit","setCanSubmit","MySwal","withReactContent","Swal","flexDirection","justifyContent","color","fontSize","fontWeight","textAlign","textTransform","letterSpacing","wordWrap","onSubmit","async","event","preventDefault","fire","title","html","allowOutsideClick","showLoading","hideLoading","icon","text","formData","FormData","append","result","handleDivClick","getElementById","click","image","accept","selectedFile","files","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","isConfirmed","Footer","date","setDate","apiUrl","timestamp","fetchDate","NavBar","navigator","class","Cart","savedRooms","setSavedRooms","sortedRooms","saved_rooms","sort","a","b","availability","undefined","margin","handleUnsaveRoom","confirm","prevRooms","handleClearDrawnRooms","App","setUsername","setAdminStatus","auth","admin_status","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.23c9f601.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/upload-file-svgrepo-com.36402c62.svg\";","var map = {\n\t\"./Whitman_Wendell-B_2.png\": 21,\n\t\"./Whitman_Wendell-B_3.png\": 22,\n\t\"./Whitman_Wendell-B_4.png\": 23,\n\t\"./Whitman_Wendell-C_2.png\": 24,\n\t\"./Whitman_Wendell-C_3.png\": 25,\n\t\"./Whitman_Wendell-C_4.png\": 26\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 20;","module.exports = __webpack_public_path__ + \"static/media/Whitman_Wendell-B_2.02f85678.png\";","module.exports = __webpack_public_path__ + \"static/media/Whitman_Wendell-B_3.2908d517.png\";","module.exports = __webpack_public_path__ + \"static/media/Whitman_Wendell-B_4.fa5a94e0.png\";","module.exports = __webpack_public_path__ + \"static/media/Whitman_Wendell-C_2.16f9ca52.png\";","module.exports = __webpack_public_path__ + \"static/media/Whitman_Wendell-C_3.a0526f19.png\";","module.exports = __webpack_public_path__ + \"static/media/Whitman_Wendell-C_4.624b148c.png\";","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"../App.css\";\n\nconst FloorPlans = () => {\n  // Retrieve query params from URL using useLocation\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  // Get query parameters, defaulting to empty string if not found\n  const resCollege = searchParams.get(\"resco\");\n  const hall = searchParams.get(\"hall\");\n  const floor = searchParams.get(\"floor\");\n  const occupancy = searchParams.get(\"occupancy\");\n  const minSquareFootage = searchParams.get(\"minSquareFootage\");\n\n  const resCollegeForCookie = searchParams.get(\"resco\") || \"\";\n  const hallForCookie = searchParams.get(\"hall\") || \"\";\n  const floorForCookie = searchParams.get(\"floor\") || \"\";\n  const occupancyForCookie = searchParams.get(\"occupancy\") || \"\";\n  const minSquareFootageForCookie = searchParams.get(\"minSquareFootage\") || \"\";\n\n  const [availabilityInfo, setAvailabilityInfo] = useState([]);\n\n  useEffect(() => {\n    // Set cookies\n    document.cookie = `resco=${resCollegeForCookie}; path=/;`;\n    document.cookie = `hall=${hallForCookie}; path=/;`;\n    document.cookie = `floor=${floorForCookie}; path=/;`;\n    document.cookie = `occupancy=${occupancyForCookie}; path=/;`;\n    document.cookie = `minSquareFootage=${minSquareFootageForCookie}; path=/;`;\n  }, [resCollegeForCookie, hallForCookie, floorForCookie, occupancyForCookie, minSquareFootageForCookie]);\n\n  // Fetch unique halls and floors from the backend\n  useEffect(() => {\n    // Build the query string dynamically based on available params\n    let queryString = \"\";\n\n    if (resCollege) queryString += `resco=${encodeURIComponent(resCollege)}&`;\n    if (hall) queryString += `hall=${encodeURIComponent(hall)}&`;\n    if (floor) queryString += `floor=${encodeURIComponent(floor)}&`;\n    if (occupancy) queryString += `occupancy=${encodeURIComponent(occupancy)}&`;\n    if (minSquareFootage)\n      queryString += `minSquareFootage=${encodeURIComponent(\n        minSquareFootage\n      )}&`;\n\n    // Remove the trailing \"&\" if there's one\n    if (queryString.endsWith(\"&\")) queryString = queryString.slice(0, -1);\n\n    fetch(`/api/floorplans${queryString ? `?${queryString}` : \"\"}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setAvailabilityInfo(data);\n      })\n      .catch((error) => console.error(\"Error fetching floor plans:\", error));\n  }, [resCollege, hall, floor, occupancy, minSquareFootage]);\n\n  return (\n    <div>\n      <h1 className=\"results-page-title\">\n        Showing results for all floor plans\n      </h1>\n      <h1 className=\"res-college-title\">\n        {/* Adding ternary comparator to handle case where resco isn't provided */}\n        {resCollege === null ? \"All Residential Colleges\" : resCollege}\n      </h1>\n      <AvailabilityTable availabilityInfo={availabilityInfo} />\n    </div>\n  );\n};\n\nconst AvailabilityTable = ({ availabilityInfo }) => {\n  // Determine the maximum number of floors to set the number of rows\n  const maxFloors =\n    availabilityInfo.length > 0\n      ? Math.max(...availabilityInfo.map((info) => info.floors.length))\n      : 0;\n\n  // check if the response is not empty\n  if (availabilityInfo.length === 0) {\n    return (\n      <div>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <br></br>\n        <h2 className=\"res-college-title\">\n          No results matched your parameters\n        </h2>\n        <img id=\"lockup\" src=\"/misc/PU_lockup.png\" alt=\"lockup\" />\n      </div>\n    );\n  }\n\n  // Helper function to generate URL-friendly links\n  const generateLink = (resco, hall, floor) => {\n    let floorNum = floor[0];\n    return `../floorplans/hallfloor?resco=${resco}&hall=${hall}&floor=${floorNum}`;\n  };\n\n  return (\n    <div className=\"table-container\">\n      <table className=\"availability-table\">\n        <thead>\n          <tr>\n            {availabilityInfo.map((info, index) => (\n              <th key={index}>{info.hall}</th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className=\"floorplan-table\">\n          {[...Array(maxFloors)].map((_, rowIndex) => (\n            <tr key={rowIndex}>\n              {availabilityInfo.map((info, colIndex) => (\n                <td key={colIndex}>\n                  {info.floors[rowIndex] ? (\n                    <a href={generateLink(\"Whitman\", info.hall, info.floors[rowIndex])}>\n                      {info.floors[rowIndex]}\n                    </a>\n                  ) : (\n                    \"\"\n                  )}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default FloorPlans;\n","import React, { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../App.css\";\n\nconst FilterComponent = () => {\n  const [residentialCollege, setResidentialCollege] = useState(\"\");\n  const [hall, setHall] = useState(\"\");\n  const [floor, setFloor] = useState(\"\");\n  const [occupancy, setOccupancy] = useState(\"\");\n  const [minSquareFootage, setMinSquareFootage] = useState(0); // New state for square footage filter\n  const [error, setError] = useState(false);\n  const [squareFootageError, setSquareFootageError] = useState(\"\");\n\n  const navigate = useNavigate();\n\n  // Hardcoded list of residential colleges\n  const residentialColleges = [\n    \"Butler\",\n    \"Forbes\",\n    \"Mathey\",\n    \"Ncw\",\n    \"Rocky\",\n    \"Whitman\",\n    \"Yeh\",\n  ];\n\n  const collegeHalls = {\n    Butler: [\n      \"Yoseloff\",\n      \"Bogle\",\n      \"1976\",\n      \"1967\",\n      \"Bloomberg\",\n      \"Wilf\",\n      \"Scully\",\n    ],\n    Forbes: [\"Main\", \"Annex\"],\n    Mathey: [\"Blair\", \"Campbell\", \"Edwards\", \"Hamilton\", \"Joline\", \"Little\"],\n    Ncw: [\"Addy\", \"Kanji\", \"Kwanza-Jones\", \"Jose-Feliciano\"],\n    Rocky: [\"Buyers\", \"Campbell\", \"Holder\", \"Witherspoon\"],\n    Whitman: [\n      \"1981\",\n      \"Fisher\",\n      \"Lauritzen\",\n      \"Murley-Pivirotto\",\n      \"Wendell-B\",\n      \"Wendell-C\",\n      \"Baker-E\",\n      \"Baker-S\",\n    ],\n    Yeh: [\"Fu\", \"Grousbeck\", \"Hariri\", \"Mannion\"],\n  };\n\n  // Hardcoded floors for Wendell B Hall\n  const wendellBFloors = [0, 1, 2, 3, 4];\n\n  // Hardcoded occupancies for Wendell B Hall\n  const wendellBOccupancies = [1, 2, 3, 4];\n\n  const handleSubmit = () => {\n    // Check if the \"Residential College\" field is filled out\n    if (!residentialCollege) {\n      setError(true); // Show error if residentialCollege is not selected\n      return;\n    }\n\n    if (minSquareFootage < 0 || isNaN(minSquareFootage)) {\n      setSquareFootageError(\n        \"Please enter a valid positive integer for square footage.\"\n      );\n      return;\n    }\n\n    setError(false); // Reset error if residentialCollege is selected\n    setSquareFootageError(\"\"); // Reset square footage error if valid\n\n    // Build URL path based on filled fields\n    let url = \"/floorplans?\";\n    url += `resco=${encodeURIComponent(residentialCollege)}`;\n\n    // Create an array to hold query parameters\n    let queryParams = [];\n\n    // Add query parameters conditionally based on their presence\n    if (hall) {\n      queryParams.push(`hall=${encodeURIComponent(hall)}`);\n    }\n    if (floor) {\n      queryParams.push(`floor=${encodeURIComponent(floor)}`);\n    }\n    if (occupancy) {\n      queryParams.push(`occupancy=${encodeURIComponent(occupancy)}`);\n    }\n    if (minSquareFootage) {\n      queryParams.push(\n        `minSquareFootage=${encodeURIComponent(minSquareFootage)}`\n      );\n    }\n\n    // Append the query parameters to the base URL\n    if (queryParams.length > 0) {\n      url += \"&\" + queryParams.join(\"&\");\n    }\n\n    // Navigate to the constructed URL\n    navigate(url);\n\n    // navigate(`/floorplans`);\n  };\n\n  // Reset function to clear all selections\n  const handleResetFilters = () => {\n    setResidentialCollege(\"\");\n    setHall(\"\");\n    setFloor(\"\");\n    setOccupancy(\"\");\n    setMinSquareFootage(0); // Reset square footage filter\n    setError(false);\n    setSquareFootageError(\"\"); // Reset square footage error\n  };\n\n  return (\n    <div className=\"filter-container\">\n      <h1 className=\"filter-container-title\">Welcome to TigerRooms</h1>\n      <br></br>\n      <h3 className=\"filter-container-subtitle\">\n        Looking for an available room?\n      </h3>\n      <div className=\"dropdown-container\">\n        <div className=\"dropdown-group\">\n          <label className=\"filter-label\" htmlFor=\"residentialCollege\">\n            Residential College*\n          </label>\n          <select\n            className=\"filter-select\"\n            id=\"residentialCollege\"\n            value={residentialCollege}\n            onChange={(e) => setResidentialCollege(e.target.value)}\n            style={{ borderColor: error ? \"red\" : \"\" }} // Highlight border if error\n          >\n            <option value=\"\" className=\"placeholder-option\">\n              Select Residential College\n            </option>\n            {residentialColleges.map((college, idx) => (\n              <option key={idx} value={college}>\n                {college}\n              </option>\n            ))}\n          </select>\n          {error && (\n            <p className=\"error-message\">\n              Please select a Residential College.\n            </p>\n          )}\n        </div>\n\n        <div className=\"dropdown-group\">\n          <label className=\"filter-label\" htmlFor=\"hall\">\n            Hall\n          </label>\n          <select\n            className=\"filter-select\"\n            id=\"hall\"\n            value={hall}\n            onChange={(e) => setHall(e.target.value)}\n            disabled={!residentialCollege} // Disable until Residential College is selected\n          >\n            <option value=\"\" className=\"placeholder-option\">\n              Select Hall\n            </option>\n            {residentialCollege &&\n              collegeHalls[residentialCollege].map((hallOption, idx) => (\n                <option key={idx} value={hallOption}>\n                  {hallOption}\n                </option>\n              ))}\n          </select>\n        </div>\n\n        <div className=\"dropdown-group\">\n          <label className=\"filter-label\" htmlFor=\"floor\">\n            Floor\n          </label>\n          <select\n            className=\"filter-select\"\n            id=\"floor\"\n            value={floor}\n            onChange={(e) => setFloor(e.target.value)}\n          >\n            <option value=\"\" className=\"placeholder-option\">\n              Select Floor\n            </option>\n            {wendellBFloors.map((sz, idx) => (\n              <option key={idx} value={sz}>\n                {sz}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"dropdown-group\">\n          <label className=\"filter-label\" htmlFor=\"occupancy\">\n            Occupancy\n          </label>\n          <select\n            className=\"filter-select\"\n            id=\"occupancy\"\n            value={occupancy}\n            onChange={(e) => setOccupancy(e.target.value)}\n          >\n            <option value=\"\" className=\"placeholder-option\">\n              Select Occupancy\n            </option>\n            {wendellBOccupancies.map((occ, idx) => (\n              <option key={idx} value={occ}>\n                {occ}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"dropdown-group\">\n          <label className=\"filter-label\" htmlFor=\"squareFootage\">\n            Minimum Square Footage\n          </label>\n          <input\n            type=\"number\"\n            id=\"squareFootage\"\n            min=\"0\"\n            // step=\"1\" // Enforce integer input\n            value={minSquareFootage}\n            onChange={(e) => {\n              const value = e.target.value;\n              // Ensure the input value is a positive integer\n              if (\n                value === \"\" ||\n                (Number.isInteger(Number(value)) && Number(value) >= 0)\n              ) {\n                setMinSquareFootage(value);\n                setSquareFootageError(\"\"); // Clear error if input is valid\n              } else {\n                setSquareFootageError(\"Please enter a valid positive integer.\");\n              }\n            }}\n            className=\"filter-select\"\n            placeholder=\"Enter min sqft\"\n          />\n          {squareFootageError && (\n            <p className=\"error-message\">{squareFootageError}</p>\n          )}\n        </div>\n      </div>\n\n      <div className=\"button-container\">\n        <button className=\"filter-submit-button\" onClick={handleSubmit}>\n          <strong>SUBMIT</strong>\n        </button>\n        <button className=\"filter-reset-button\" onClick={handleResetFilters}>\n          <strong>RESET</strong>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterComponent;\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport \"../App.css\";\n\nconst HallFloor = ({ username }) => {\n  console.log(\"hallfloor route hit\");\n  // Retrieve query params from URL using useLocation\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n\n  // State for room information and expanded rows\n  const [roomInfo, setRoomInfo] = useState([]);\n  const [expandedRows, setExpandedRows] = useState([]);\n  const [debouncing, setDebouncing] = useState(false); // Debouncing state\n\n  // Get query parameters, defaulting to empty string if not found\n  const resCollege = searchParams.get(\"resco\");\n  const hall = searchParams.get(\"hall\");\n  const floor = searchParams.get(\"floor\");\n\n  // Fetch room data along with saved status for the user from the backend\n  useEffect(() => {\n    fetch(\n      `/api/floorplans/hallfloor?netid=${username}&hall=${hall}&floor=${floor}`\n    )\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        setRoomInfo(data);\n      })\n      .catch((error) => console.error(\"Error fetching room data:\", error));\n  }, [floor, username]);\n\n  let imageSrc;\n\n  try {\n    imageSrc = require(`../img/floorplans/${resCollege}_${hall}_${floor}.png`);\n\n    console.log(imageSrc);\n  } catch (error) {\n    console.log(\"non-existent combination of resco, hall and floor\");\n\n    return (\n      <div className=\"floor-plan-error-container\">\n        <h1 className=\"floor-plan-error-message\">\n          No results matched your parameters\n        </h1>\n\n        <h3 className=\"floor-plan-error-message\">\n          Click{\" \"}\n          <a href=\"/\" className=\"back-to-floorplans\">\n            here\n          </a>{\" \"}\n          to do another search\n        </h3>\n      </div>\n    );\n  }\n\n\n  // Toggle row expansion\n  const toggleExpandRow = (index) => {\n    if (expandedRows.includes(index)) {\n      setExpandedRows(expandedRows.filter((i) => i !== index));\n    } else {\n      setExpandedRows([...expandedRows, index]);\n    }\n  };\n\n  // Handle Save/Unsave action with Debouncing\n  const handleSaveToggle = (roomNumber, hall, isSaved) => {\n    if (debouncing) return; // Prevent further actions if debouncing\n\n    setDebouncing(true); // Start debouncing\n    const url = `/api/${isSaved ? \"unsave_room\" : \"save_room\"}`;\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        netid: username,\n        room_number: roomNumber,\n        hall: hall,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        // Update the saved status and total saves in the roomInfo state\n        setRoomInfo((prevRoomInfo) =>\n          prevRoomInfo.map((room) => {\n            if (room.name === `${hall} ${roomNumber}`) {\n              // Prevent decreasing total_saves below 0\n              if (isSaved && room.total_saves === 0) {\n                return {\n                  ...room,\n                  isSaved: false, // Force the Save button to reappear\n                };\n              }\n              return {\n                ...room,\n                isSaved: !isSaved,\n                total_saves: isSaved\n                  ? room.total_saves - 1\n                  : room.total_saves + 1,\n              };\n            }\n            return room;\n          })\n        );\n      })\n      .catch((error) => console.error(\"Error toggling save status:\", error))\n      .finally(() => {\n        // End debouncing after a delay\n        setTimeout(() => {\n          setDebouncing(false);\n        }, 500); // Adjust delay as needed\n      });\n  };\n\n  const getCookie = (key) => {\n    const cookies = document.cookie.split(\"; \");\n    for (const cookie of cookies) {\n      const [cookieKey, cookieValue] = cookie.split(\"=\");\n      if (cookieKey === key) {\n        return cookieValue || \"\"; // Decode in case of encoded values\n      }\n    }\n    return \"\"; // Return empty string if the key isn't found\n  };\n\n  // Unpacking cookies\n  const rescoFromCookie = getCookie(\"resco\") || \"\";\n  const hallFromCookie = getCookie(\"hall\") || \"\";\n  const floorFromCookie = getCookie(\"floor\") || \"\";\n  const occupancyFromCookie = getCookie(\"occupancy\") || \"\";\n  const minSquareFootageFromCookie = getCookie(\"minSquareFootage\") || \"\";\n\n  const returnLink = `/floorplans?resco=${rescoFromCookie}&hall=${hallFromCookie}&floor=${floorFromCookie}&occupancy=${occupancyFromCookie}&minSquareFootage=${minSquareFootageFromCookie}`\n\n  return (\n    <div className=\"floor-plan-flexbox\">\n      <div className=\"floor-plan-map\">\n        <h1 className=\"floor-plan-title\">\n          {resCollege + \" College, \" + hall + \" Hall, Floor \" + floor}\n        </h1>\n        <img src={imageSrc} alt=\"HallMap\" className=\"floor-plan-image\" />\n        <h3 className=\"back-link\">\n          Click{\" \"}\n          <a href={returnLink} className=\"back-to-floorplans\">\n            here\n          </a>{\" \"}\n          to return to floor plans list\n        </h3>\n      </div>\n      <div className=\"available-rooms-table\">\n        <RoomInfoTable\n          roomInfo={roomInfo}\n          expandedRows={expandedRows}\n          toggleExpandRow={toggleExpandRow}\n          handleSaveToggle={handleSaveToggle}\n          hallName={hall}\n        />\n      </div>\n    </div>\n  );\n};\n\n// RoomInfoTable component\nconst RoomInfoTable = ({\n  roomInfo,\n  expandedRows,\n  toggleExpandRow,\n  handleSaveToggle,\n  hallName,\n}) => {\n  return (\n    <table border=\"1\" cellPadding=\"10\" className=\"room-availability-table\">\n      <thead className=\"room-info-thead\">\n        <tr>\n          <th className=\"availability-table-th\">Availability Info</th>\n        </tr>\n      </thead>\n      <tbody>\n        {roomInfo.map((oneRoomInfo, index) => (\n          <React.Fragment key={index}>\n            <tr>\n              <td\n                className=\"availability-table-td\"\n                onClick={() => toggleExpandRow(index)}\n              >\n                <div className=\"availability\">\n                  <div\n                    style={{\n                      width: \"1.4vh\",\n                      height: \"1.4vh\",\n                      backgroundColor:\n                        oneRoomInfo.isAvailable === \"T\" ? \"green\" : \"red\",\n                      borderRadius:\n                        oneRoomInfo.isAvailable === \"T\" ? \"50%\" : \"0\",\n                      marginRight: \"1.4vh\",\n                    }}\n                  ></div>\n                  <strong>{oneRoomInfo.name}</strong>{\" \"}\n                </div>\n                <div style={{ userSelect: \"none\" }}>\n                  {expandedRows.includes(index) ? \"➖\" : \"➕\"}\n                </div>\n              </td>\n            </tr>\n            {expandedRows.includes(index) && (\n              <tr>\n                <td className=\"availability-table-td\" colSpan=\"3\">\n                  <div style={{ padding: \"10px\", backgroundColor: \"#f9f9f9\" }}>\n                    <strong>{oneRoomInfo.size}</strong> <br />\n                    <strong>{oneRoomInfo.occupancy}</strong> <br />\n                    <strong>Total Saves: {oneRoomInfo.total_saves}</strong>\n                    <br />\n                    <button\n                      onClick={() =>\n                        handleSaveToggle(\n                          oneRoomInfo.name.split(\" \")[1], // Extract room number from name\n                          hallName,\n                          oneRoomInfo.isSaved\n                        )\n                      }\n                      style={{\n                        marginTop: \"10px\",\n                        padding: \"5px 10px\",\n                        cursor: \"pointer\",\n                      }}\n                    >\n                      {oneRoomInfo.isSaved ? \"Unsave\" : \"Save\"}\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            )}\n          </React.Fragment>\n        ))}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td id=\"availability-key-td\">\n            <strong>Draw Availability Key</strong>\n            <div style={{ display: \"block\", marginTop: \"10px\" }}>\n              <div\n                style={{\n                  marginBottom: \"5px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                }}\n              >\n                <div\n                  style={{\n                    width: \"10px\",\n                    height: \"10px\",\n                    backgroundColor: \"green\",\n                    borderRadius: \"50%\",\n                    marginRight: \"5px\",\n                  }}\n                ></div>\n                <span>Available</span>\n              </div>\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                <div\n                  style={{\n                    width: \"10px\",\n                    height: \"10px\",\n                    backgroundColor: \"red\",\n                    marginRight: \"5px\",\n                  }}\n                ></div>\n                <span>Unavailable</span>\n              </div>\n            </div>\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  );\n};\n\nexport default HallFloor;\n","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\n\nconst Logout = () => {\n  const apiUrl = process.env.REACT_APP_API_URL;\n  const [message, setMessage] = useState(\"Error, please try again\");\n\n  useEffect(() => {\n    fetch(\"/logoutcas\", {\n      method: \"GET\",\n      credentials: \"include\",\n    })\n      .then((res) => {\n        if (!res.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        window.location.href = data.logout_url; // Redirect to logout URL\n        setMessage(data.message);\n      })\n      .catch((err) => {\n        console.error(\"Error during logout:\", err);\n        alert(\"Something went wrong. Please try again.\");\n      });\n  }, [apiUrl]);\n\n  return (\n    <div>\n      <h1>{message}</h1>\n    </div>\n  );\n};\n\nexport default Logout;\n","import React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport withReactContent from \"sweetalert2-react-content\";\nimport image from \"../img/misc/upload-file-svgrepo-com.svg\";\nimport \"../App.css\";\n\nconst UploadPDFs = ({ adminStatus }) => {\n  // displayed pdf filename and file itself\n  const [fileName, setFileName] = useState(\"No file selected\");\n  const [file, setFile] = useState(null);\n  const [canSubmit, setCanSubmit] = useState(true);\n  const MySwal = withReactContent(Swal);\n\n  // Check if the user is unauthorized\n  if (!adminStatus) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"90vh\",\n          backgroundColor: \"#f4f4f4\",\n          padding: \"0 5vw\",\n        }}\n      >\n        <h1\n          style={{\n            color: \"red\",\n            fontSize: \"8vw\",\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            marginBottom: \"2vh\",\n            textTransform: \"uppercase\",\n            letterSpacing: \"2px\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          Unauthorized Access\n        </h1>\n        <p\n          style={{\n            color: \"darkred\",\n            fontSize: \"4vw\",\n            fontWeight: \"bold\",\n            textAlign: \"center\",\n            marginTop: \"1vh\",\n            wordWrap: \"break-word\",\n          }}\n        >\n          You do not have permission to access this page. Please contact an\n          admin.\n        </p>\n      </div>\n    );\n  }\n\n  // get uploaded file, set filename and file\n  const handleFileChange = (event) => {\n    const selectedFile = event.target.files[0];\n    setFileName(selectedFile ? selectedFile.name : \"No file selected\");\n    setFile(selectedFile || null);\n  };\n\n  // make entire dashed box clickable\n  const handleDivClick = () => {\n    document.getElementById(\"upload-pdf\").click();\n  };\n\n  const handleReset = async (event) => {\n    event.preventDefault();\n\n    // Show confirmation dialog\n    MySwal.fire({\n      title: \"Are you sure?\",\n      text: \"You won't be able to revert this!\",\n      icon: \"warning\",\n      showCancelButton: true,\n      confirmButtonColor: \"#3085d6\",\n      cancelButtonColor: \"#d33\",\n      confirmButtonText: \"Yes, reset it!\",\n    }).then(async (result) => {\n      // If confirmed, proceed with reset\n      if (result.isConfirmed) {\n        // Show loading message\n        MySwal.fire({\n          title: \"Loading...\",\n          html: \"Please wait a moment.\",\n          allowOutsideClick: false,\n        });\n        MySwal.showLoading();\n\n        // Perform reset action\n        const formData = new FormData();\n        formData.append(\"request-type\", 0); // request type for reset action\n\n        try {\n          const response = await fetch(\"/api/uploadpdf\", {\n            method: \"POST\",\n            body: formData,\n          });\n\n          const result = await response.json();\n\n          // Hide loading message\n          MySwal.hideLoading();\n\n          if (response.ok) {\n            MySwal.fire({\n              title: \"Reset Complete!\",\n              text: result.message,\n              icon: \"success\",\n            });\n          } else {\n            MySwal.fire({\n              icon: \"error\",\n              title: \"Oops...\",\n              text: result.error,\n            });\n          }\n        } catch (error) {\n          MySwal.fire({\n            icon: \"error\",\n            title: \"Oops...\",\n            text: \"An error occurred while resetting the file.\",\n          });\n        }\n      }\n    });\n  };\n\n  // wait for user to submit\n  const handleSubmit = async (event) => {\n    // prevent default and multiple submission\n    event.preventDefault();\n    if (!canSubmit) return;\n\n    setCanSubmit(false);\n    MySwal.fire({\n      title: \"Loading...\",\n      html: \"Please wait a moment.\",\n      allowOutsideClick: false,\n    });\n    MySwal.showLoading();\n\n    if (!file) {\n      //   alert(\"Please select a file to upload.\");\n      MySwal.hideLoading();\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"Please select a file to upload.\",\n      });\n      setCanSubmit(true);\n      return;\n    }\n\n    // store file into FormData object\n    const formData = new FormData();\n    formData.append(\"request-type\", 1); // request type\n    formData.append(\"rooms-pdf\", file); // file\n\n    // send POST request with file\n    try {\n      const response = await fetch(\"/api/uploadpdf\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      const result = await response.json();\n\n      // display server response\n      MySwal.hideLoading();\n      if (response.ok) {\n        MySwal.fire({\n          title: \"Thank you!\",\n          text: result.message,\n          icon: \"success\",\n        });\n      } else {\n        MySwal.fire({\n          icon: \"error\",\n          title: \"Oops...\",\n          text: result.error,\n        });\n      }\n    } catch (error) {\n      MySwal.fire({\n        icon: \"error\",\n        title: \"Oops...\",\n        text: \"An error occurred while uploading the file.\",\n      });\n    }\n    setCanSubmit(true);\n  };\n\n  return (\n    <div className=\"pdf-upload-page-cont\">\n      <h1 id=\"pdf-upload-text\">\n        Upload the latest PDF here! Our students will thank you!\n      </h1>\n      <div id=\"upload-pdfs-cont\">\n        <form id=\"pdf-form\" onSubmit={handleSubmit}>\n          <div id=\"file-upload\" onClick={handleDivClick}>\n            <label htmlFor=\"upload-pdf\">\n              <img src={image} alt=\"Upload\" />\n              <span className=\"pdf-text\"> Drag & Drop </span>\n              <span className=\"pdf-text\"> or browse</span>\n            </label>\n            <input\n              type=\"file\"\n              id=\"upload-pdf\"\n              name=\"rooms-pdf\"\n              accept=\".pdf\"\n              onChange={handleFileChange}\n              style={{ display: \"none\" }}\n            />\n            <small>Supports: PDF</small>\n            <div className=\"uploaded-file-name\">\n              <span>Uploaded file:</span>&nbsp;<span>{fileName}</span>\n            </div>\n          </div>\n          <button type=\"submit\">Submit</button>\n        </form>\n      </div>\n      <div>\n        <button id=\"reset-pdf-btn\" onClick={handleReset}>\n          Reset Database\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default UploadPDFs;\n","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\n\nconst Footer = () => {\n  const [date, setDate] = useState(\"\"); // State to store the updated time\n  const apiUrl = process.env.REACT_APP_API_URL;\n\n  useEffect(() => {\n    // Fetch the updated time when the component mounts\n    const fetchDate = async () => {\n      try {\n        const response = await fetch(`${apiUrl}/api/getupdatedtime`, {\n          method: \"GET\",\n        });\n        if (response.ok) {\n          const data = await response.json();\n          setDate(data.timestamp); // Assuming the API returns a timestamp field\n        } else {\n          console.error(\"Error fetching date:\", response.status);\n        }\n      } catch (error) {\n        console.error(\"Fetch error:\", error);\n      }\n    };\n\n    fetchDate();\n  }, [apiUrl]); // Run effect when the component mounts or when apiUrl changes\n\n  return (\n    <footer>\n      <img id=\"lockup\" src=\"/misc/PU_lockup.png\" alt=\"lockup\" />\n      <div id=\"middle-text-cont\">\n        <ul>\n          <li id=\"update-text\">\n            Last Updated:{\" \"}\n            <span id=\"timestamp\">{date ? date : \"Loading...\"}</span>\n          </li>\n          <li>Website created by TigerRooms group (COS333 Fall '24 Project)</li>\n        </ul>\n      </div>\n      <div className=\"right-text-cont\">\n        <p>TigerRooms</p>\n        <p>© 2024 The Trustees of Princeton University</p>\n        <p>\n          <a href=\"https://www.princeton.edu/content/copyright-infringement\">\n            Copyright Infringement{\" \"}\n          </a>{\" \"}\n          |\n          <a href=\"https://www.princeton.edu/privacy-notice\">\n            {\" \"}\n            Privacy Notice{\" \"}\n          </a>\n        </p>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"../App.css\";\n\nconst NavBar = ({ adminStatus }) => {\n  const navigator = useNavigate();\n  return (\n    <nav>\n      <div class=\"logo-cont\">\n        <img id=\"logo\" src=\"/misc/princeton-logo.png\" alt=\"Princeton\" />\n      </div>\n      <ul id=\"nav-options\">\n        <li>\n          <ul id=\"left-options\">\n            <li>\n              <a href=\"/\">Home</a>\n            </li>\n            <li>\n              <a href=\"/floorplans\">Floor Plans</a>\n            </li>\n            {adminStatus && (\n              <li>\n                <a href=\"/upload-pdfs\">Upload PDFs</a>\n              </li>\n            )}\n          </ul>\n        </li>\n        <li>\n          <ul id=\"right-options\">\n            <li>\n              <a href=\"/logout\">Log Out</a>\n            </li>\n            <li>\n              <button\n                id=\"cart-btn\"\n                onClick={() => {\n                  navigator(\"/cart\");\n                }}\n              >\n                <img id=\"cart-svg\" src=\"/misc/cart.svg\" alt=\"View Cart\" />\n              </button>\n            </li>\n          </ul>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\n\nconst Cart = ({ username }) => {\n  const [savedRooms, setSavedRooms] = useState([]);\n\n  // Fetch saved rooms for the user\n  useEffect(() => {\n    fetch(`/api/saved_rooms?user_id=${username}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then((data) => {\n        // Sort rooms so available ones come first\n        const sortedRooms = data.saved_rooms.sort((a, b) => {\n          return b.availability - a.availability;\n        });\n        setSavedRooms(sortedRooms);\n      })\n      .catch((error) => console.error(\"Error fetching saved rooms:\", error));\n  }, [username]);\n\n  // Handle room unsave\n  const handleUnsaveRoom = (roomNumber, hall) => {\n    const confirmed = window.confirm(\n      \"Are you sure you want to remove this room from your cart?\"\n    );\n    if (!confirmed) return;\n\n    fetch(\"/api/unsave_room\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        netid: username,\n        room_number: roomNumber,\n        hall: hall,\n      }),\n    })\n      .then((response) => response.json())\n      .then(() => {\n        setSavedRooms((prevRooms) =>\n          prevRooms.filter(\n            (room) => !(room.room_number === roomNumber && room.hall === hall)\n          )\n        );\n      })\n      .catch((error) => console.error(\"Error unsaving room:\", error));\n  };\n\n  // Handle clearing all drawn rooms\n  const handleClearDrawnRooms = () => {\n    const confirmed = window.confirm(\n      \"Are you sure you want to clear all drawn rooms from the cart?\"\n    );\n    if (!confirmed) return;\n\n    fetch(\"/api/clear_drawn_rooms\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ netid: username }),\n    })\n      .then((response) => response.json())\n      .then(() => {\n        setSavedRooms((prevRooms) =>\n          prevRooms.filter((room) => room.availability === true)\n        );\n      })\n      .catch((error) => console.error(\"Error clearing drawn rooms:\", error));\n  };\n\n  return (\n    <div className=\"cart-page\">\n      <h1 className=\"cart-title\">Your Saved Rooms</h1>\n      {savedRooms.length > 0 ? (\n        <>\n          <table className=\"saved-rooms-table\">\n            <thead className=\"saved-rooms-thead\">\n              <tr>\n                <th>Room</th>\n                <th>Total Saves</th>\n                <th>Availability</th>\n                <th></th>\n              </tr>\n            </thead>\n            <tbody>\n              {savedRooms.map((room, index) => (\n                <tr key={index}>\n                  <td>{`${room.hall} ${room.room_number}`}</td>\n                  <td>\n                    {room.total_saves !== undefined ? room.total_saves : \"N/A\"}\n                  </td>\n                  <td>\n                    <div\n                      style={{\n                        width: \"1vw\",\n                        height: \"1vw\",\n                        borderRadius: \"0.2vw\",\n                        backgroundColor:\n                          room.availability === true ? \"green\" : \"red\",\n                        margin: \"0 auto\",\n                      }}\n                    ></div>\n                  </td>\n                  <td>\n                    <button\n                      className=\"trash-button\"\n                      onClick={() =>\n                        handleUnsaveRoom(room.room_number, room.hall)\n                      }\n                    >\n                      🗑️\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <button\n            className=\"clear-drawn-rooms-button\"\n            onClick={handleClearDrawnRooms}\n          >\n            Clear All Unavailable (Drawn) Rooms From Cart\n          </button>\n        </>\n      ) : (\n        <p className=\"no-saved-rooms\">You haven't saved any rooms yet.</p>\n      )}\n    </div>\n  );\n};\n\nexport default Cart;\n","import React from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport FloorPlans from \"./pages/FloorPlans\"; // The page listing all floor plans\nimport FilterComponent from \"./pages/FilterComponent\";\nimport HallFloor from \"./pages/HallFloor\"; // The detailed view of Hall floor\nimport Logout from \"./pages/Logout\";\nimport UploadPDFs from \"./pages/UploadPDFs\";\nimport Footer from \"./Components/Footer\";\nimport NavBar from \"./Components/NavBar\";\nimport Cart from \"./pages/Cart\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [username, setUsername] = React.useState(\"\");\n  const [adminStatus, setAdminStatus] = React.useState(false);\n\n  React.useEffect(() => {\n    const auth = async () => {\n      try {\n        const response = await fetch(\"/api/user\");\n        const data = await response.json();\n        if (data.username) {\n          setUsername(data.username);\n          setAdminStatus(data.admin_status);\n          console.log(`my username is ${data.username}`);\n          console.log(`my admin status is ${data.admin_status}`);\n        } else {\n          console.alert(\"NetID is not set, retrying...\");\n          setTimeout(auth, 2000);\n        }\n      } catch (error) {\n        console.error(\"An error occurred: \", error);\n      }\n    };\n\n    auth();\n  }, []);\n\n  return (\n    <BrowserRouter>\n      <NavBar adminStatus={adminStatus} />\n\n      <Routes>\n        <Route path=\"/floorplans\" element={<FloorPlans />} />\n        <Route path=\"/\" element={<FilterComponent />} />\n        <Route\n          path=\"/floorplans/hallfloor\"\n          element={<HallFloor username={username} />}\n        />\n        {<Route path=\"/logout\" element={<Logout />}></Route>}\n        <Route path=\"/upload-pdfs\" element={<UploadPDFs adminStatus={adminStatus}/>} />\n        <Route path=\"/cart\" element={<Cart username={username} />} />\n      </Routes>\n\n      <Footer />\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// kind of like the main\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}